import numpy as npdef load_data(file_path):    features = []    targets = []    with open(file_path, 'r') as file:        lines = file.readlines()        for line in lines[1:]:            row_data = list(map(float, line.strip().split(',')))            feature_values = row_data[:-1]            target_value = row_data[-1]            features.append(feature_values)            targets.append(target_value)    return np.array(features), np.array(targets)def svm_soft_margin_train(X, y, alpha=0.001, lambda_=0.01, n_iterations=1000):    n_samples, n_features = X.shape    w = np.zeros(n_features)    b = 0    for iteration in range(n_iterations):        for i, Xi in enumerate(X):            if y[i] * (np.dot(Xi, w) - b) >= 1:                w -= alpha * (2 * lambda_ * w)            else:                w -= alpha * (2 * lambda_ * w - np.dot(Xi, y[i]))                b -= alpha * y[i]    return w, bdef svm_soft_margin_predict(X, w, b):    pred = np.dot(X, w) - b    result = [1 if val > 0 else -1 for val in pred]    return resultdef accuracy(y_true, y_pred):    return np.mean(np.array(y_true) == np.array(y_pred))if __name__ == "__main__":    file_path = 'KNN.csv'    X, y = load_data(file_path)    y = np.where(y == 0, -1, 1)    w, b = svm_soft_margin_train(X, y)    predictions = svm_soft_margin_predict(X, w, b)    acc = accuracy(y, predictions)    print("Predictions:", predictions)    print("Accuracy:", acc)